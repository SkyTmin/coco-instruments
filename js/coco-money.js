const cocoMoney = {
    sheets: [],
    categories: ['–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç', '–ü—Ä–æ–¥—É–∫—Ç—ã', '–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è', '–ó–¥–æ—Ä–æ–≤—å–µ', '–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ', '–î—Ä—É–≥–æ–µ'],
    currentExportData: null,
    
    init() {
        this.loadData();
        this.render();
        this.setupDateDefault();
    },
    
    setupDateDefault() {
        const dateInput = document.querySelector('#income-form input[name="date"]');
        if (dateInput) {
            dateInput.value = new Date().toISOString().split('T')[0];
        }
    },
    
    loadData() {
        const saved = localStorage.getItem('cocoMoneySheets');
        if (saved) {
            this.sheets = JSON.parse(saved);
        }
    },
    
    saveData() {
        localStorage.setItem('cocoMoneySheets', JSON.stringify(this.sheets));
    },
    
    showIncomeForm() {
        document.getElementById('income-form-modal').style.display = 'block';
        this.setupDateDefault();
    },
    
    hideIncomeForm() {
        document.getElementById('income-form-modal').style.display = 'none';
        document.getElementById('income-form').reset();
    },
    
    addIncomeSheet(event) {
        event.preventDefault();
        const form = event.target;
        
        const sheet = {
            id: Date.now(),
            title: form.title.value,
            amount: parseFloat(form.amount.value),
            date: form.date.value,
            note: form.note.value,
            preliminary: form.preliminary.checked,
            expenses: []
        };
        
        this.sheets.push(sheet);
        this.saveData();
        this.render();
        this.hideIncomeForm();
    },
    
    addExpense(sheetId, event) {
        event.preventDefault();
        const form = event.target;
        
        const expense = {
            id: Date.now(),
            title: form.expenseTitle.value,
            amount: parseFloat(form.expenseAmount.value),
            category: form.expenseCategory.value,
            note: form.expenseNote.value
        };
        
        const sheet = this.sheets.find(s => s.id === sheetId);
        if (sheet) {
            sheet.expenses.push(expense);
            this.saveData();
            this.render();
        }
    },
    
    deleteExpense(sheetId, expenseId) {
        const sheet = this.sheets.find(s => s.id === sheetId);
        if (sheet) {
            sheet.expenses = sheet.expenses.filter(e => e.id !== expenseId);
            this.saveData();
            this.render();
        }
    },
    
    deleteSheet(sheetId) {
        if (confirm('–£–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –¥–æ—Ö–æ–¥–Ω—ã–π –ª–∏—Å—Ç?')) {
            this.sheets = this.sheets.filter(s => s.id !== sheetId);
            this.saveData();
            this.render();
        }
    },
    
    render() {
        const container = document.getElementById('income-sheets-container');
        const noData = document.getElementById('no-data');
        const statistics = document.getElementById('statistics');
        
        if (this.sheets.length === 0) {
            noData.style.display = 'block';
            container.innerHTML = '';
            statistics.style.display = 'none';
            return;
        }
        
        noData.style.display = 'none';
        statistics.style.display = 'block';
        
        container.innerHTML = this.sheets.map(sheet => this.renderSheet(sheet)).join('');
        this.renderStatistics();
    },
    
    renderSheet(sheet) {
        const totalExpenses = sheet.expenses.reduce((sum, exp) => sum + exp.amount, 0);
        const balance = sheet.amount - totalExpenses;
        
        return `
            <div class="card income-sheet ${sheet.preliminary ? 'preliminary-card' : ''}">
                <div class="sheet-header">
                    <div class="sheet-info">
                        <h3 class="sheet-title">
                            ${sheet.title}
                            ${sheet.preliminary ? '<span class="preliminary-badge">–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π</span>' : ''}
                        </h3>
                        <div class="sheet-amount">+ ${this.formatMoney(sheet.amount)}</div>
                        <div class="sheet-meta">
                            <span>üìÖ ${this.formatDate(sheet.date)}</span>
                            ${sheet.note ? `<span>üìù ${sheet.note}</span>` : ''}
                        </div>
                        <div class="sheet-meta">
                            <span>üí∞ –ë–∞–ª–∞–Ω—Å: <strong class="${balance >= 0 ? '' : 'negative'}">${this.formatMoney(balance)}</strong></span>
                        </div>
                    </div>
                    <div class="sheet-actions">
                        <button class="export-btn" onclick="cocoMoney.showExportModal(${sheet.id})">
                            üì• –°–∫–∞—á–∞—Ç—å
                        </button>
                    </div>
                </div>
                
                <div class="expenses-section">
                    <h4>–†–∞—Å—Ö–æ–¥—ã</h4>
                    <form class="expense-form" onsubmit="cocoMoney.addExpense(${sheet.id}, event)">
                        <input type="text" name="expenseTitle" class="expense-input" placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞" required>
                        <div class="expense-form-row">
                            <input type="number" name="expenseAmount" class="expense-input" placeholder="–°—É–º–º–∞" step="0.01" required>
                            <select name="expenseCategory" class="expense-input" required>
                                <option value="">–ö–∞—Ç–µ–≥–æ—Ä–∏—è</option>
                                ${this.categories.map(cat => `<option value="${cat}">${cat}</option>`).join('')}
                            </select>
                        </div>
                        <input type="text" name="expenseNote" class="expense-input" placeholder="–ó–∞–º–µ—Ç–∫–∞ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)">
                        <button type="submit" class="add-expense-btn">–î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥</button>
                    </form>
                    
                    ${sheet.expenses.length > 0 ? `
                        <ul class="expenses-list">
                            ${sheet.expenses.map(expense => `
                                <li class="expense-item">
                                    <div class="expense-info">
                                        <div class="expense-title">${expense.title}</div>
                                        <div class="expense-meta">
                                            <span>üè∑Ô∏è ${expense.category}</span>
                                            ${expense.note ? `<span>üìù ${expense.note}</span>` : ''}
                                        </div>
                                    </div>
                                    <div class="expense-amount">‚àí ${this.formatMoney(expense.amount)}</div>
                                    <button class="delete-expense" onclick="cocoMoney.deleteExpense(${sheet.id}, ${expense.id})">√ó</button>
                                </li>
                            `).join('')}
                        </ul>
                    ` : '<p style="text-align: center; color: rgba(123, 75, 42, 0.5);">–†–∞—Å—Ö–æ–¥–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç</p>'}
                </div>
            </div>
        `;
    },
    
    renderStatistics() {
        const totalSheets = this.sheets.length;
        const totalIncome = this.sheets.reduce((sum, sheet) => sum + sheet.amount, 0);
        const totalExpenses = this.sheets.reduce((sum, sheet) => 
            sum + sheet.expenses.reduce((expSum, exp) => expSum + exp.amount, 0), 0);
        const netProfit = totalIncome - totalExpenses;
        
        document.getElementById('total-sheets').textContent = totalSheets;
        document.getElementById('total-income').textContent = this.formatMoney(totalIncome);
        document.getElementById('total-expenses').textContent = this.formatMoney(totalExpenses);
        document.getElementById('net-profit').textContent = this.formatMoney(netProfit);
        
        const categoriesData = {};
        this.sheets.forEach(sheet => {
            sheet.expenses.forEach(expense => {
                if (!categoriesData[expense.category]) {
                    categoriesData[expense.category] = 0;
                }
                categoriesData[expense.category] += expense.amount;
            });
        });
        
        const categoriesHtml = Object.keys(categoriesData).length > 0 ? `
            <h3>–†–∞—Å—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º</h3>
            ${Object.entries(categoriesData)
                .sort((a, b) => b[1] - a[1])
                .map(([category, amount]) => `
                    <div class="category-item">
                        <span class="category-name">${category}</span>
                        <span class="category-amount">${this.formatMoney(amount)}</span>
                    </div>
                `).join('')}
        ` : '';
        
        document.getElementById('categories-breakdown').innerHTML = categoriesHtml;
    },
    
    showExportModal(sheetId) {
        const sheet = this.sheets.find(s => s.id === sheetId);
        if (!sheet) return;
        
        const exportData = this.formatExportData(sheet);
        this.currentExportData = exportData;
        
        document.getElementById('export-content').value = exportData;
        document.getElementById('export-modal').style.display = 'block';
    },
    
    hideExportModal() {
        document.getElementById('export-modal').style.display = 'none';
        this.currentExportData = null;
    },
    
    formatExportData(sheet) {
        const totalExpenses = sheet.expenses.reduce((sum, exp) => sum + exp.amount, 0);
        const balance = sheet.amount - totalExpenses;
        
        let text = `‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë         COCO MONEY - –û–¢–ß–Å–¢            ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

üìä –î–û–•–û–î–ù–´–ô –õ–ò–°–¢${sheet.preliminary ? ' (–ü–†–ï–î–í–ê–†–ò–¢–ï–õ–¨–ù–´–ô)' : ''}
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

üìå –ù–∞–∑–≤–∞–Ω–∏–µ: ${sheet.title}
üíµ –î–æ—Ö–æ–¥: ${this.formatMoney(sheet.amount)}
üìÖ –î–∞—Ç–∞: ${this.formatDate(sheet.date)}
${sheet.note ? `üìù –ó–∞–º–µ—Ç–∫–∞: ${sheet.note}\n` : ''}

üí∏ –†–ê–°–•–û–î–´
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ`;
        
        if (sheet.expenses.length > 0) {
            sheet.expenses.forEach((expense, index) => {
                text += `

${index + 1}. ${expense.title}
   –°—É–º–º–∞: ${this.formatMoney(expense.amount)}
   –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${expense.category}${expense.note ? `
   –ó–∞–º–µ—Ç–∫–∞: ${expense.note}` : ''}`;
            });
            
            text += `

‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
–ò–¢–û–ì–û –†–ê–°–•–û–î–û–í: ${this.formatMoney(totalExpenses)}`;
        } else {
            text += `

   –†–∞—Å—Ö–æ–¥–æ–≤ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ`;
        }
        
        text += `

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
üí∞ –ë–ê–õ–ê–ù–°: ${this.formatMoney(balance)}
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: ${new Date().toLocaleString('ru-RU')}
¬© Coco Instruments`;
        
        return text;
    },
    
    downloadData() {
        if (!this.currentExportData) return;
        
        const blob = new Blob([this.currentExportData], { type: 'text/plain;charset=utf-8' });
        const link = document.createElement('a');
        link.href = URL.createObjectURL(blob);
        link.download = `coco-money-${new Date().toISOString().split('T')[0]}.txt`;
        link.click();
    },
    
    async copyData() {
        if (!this.currentExportData) return;
        
        try {
            await navigator.clipboard.writeText(this.currentExportData);
            const notification = document.getElementById('copy-notification');
            notification.style.display = 'block';
            setTimeout(() => {
                notification.style.display = 'none';
            }, 2000);
        } catch (err) {
            alert('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç');
        }
    },
    
    formatMoney(amount) {
        return new Intl.NumberFormat('ru-RU', {
            style: 'currency',
            currency: 'RUB',
            minimumFractionDigits: 0,
            maximumFractionDigits: 2
        }).format(amount);
    },
    
    formatDate(dateString) {
        return new Date(dateString).toLocaleDateString('ru-RU', {
            day: 'numeric',
            month: 'long',
            year: 'numeric'
        });
    }
};

document.addEventListener('DOMContentLoaded', () => {
    cocoMoney.init();
});

window.addEventListener('click', (e) => {
    if (e.target.classList.contains('modal')) {
        if (e.target.id === 'income-form-modal') {
            cocoMoney.hideIncomeForm();
        } else if (e.target.id === 'export-modal') {
            cocoMoney.hideExportModal();
        }
    }
});