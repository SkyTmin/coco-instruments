const scaleCalculator = {
    // –ò–∑–≤–µ—Å—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–∏
    knownValues: {
        scale1: 1000,
        height1: 2.5,
        scale2: 100,
        height2: 0.250
    },
    
    // –ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å—á—ë—Ç–æ–≤
    history: [],
    
    // –¢–∞–π–º–µ—Ä –¥–ª—è –∑–∞–¥–µ—Ä–∂–∫–∏ —Ä–∞—Å—á—ë—Ç–∞
    debounceTimer: null,
    
    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
    isOnline: navigator.onLine,
    pendingSync: false,
    
    init() {
        console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –º–∞—Å—à—Ç–∞–±–æ–≤');
        this.setupEventListeners();
        this.setupNetworkListeners();
        this.loadHistory();
        this.addInitialAnimation();
    },

    setupNetworkListeners() {
        window.addEventListener('online', () => {
            this.isOnline = true;
            if (this.pendingSync) {
                this.syncToServer();
            }
        });

        window.addEventListener('offline', () => {
            this.isOnline = false;
        });
    },

    async loadHistory() {
    const user = await API.getProfile();
    if (user && this.isOnline) {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞ –¢–û–õ–¨–ö–û –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try {
            console.log('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –º–∞—Å—à—Ç–∞–±–æ–≤ —Å —Å–µ—Ä–≤–µ—Ä–∞...');
            const serverHistory = await API.scaleCalculator.getHistory();
            
            console.log('üì• –ò—Å—Ç–æ—Ä–∏—è —Å —Å–µ—Ä–≤–µ—Ä–∞:', serverHistory);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –í–°–ï–ì–î–ê, –¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω–∏ –ø—É—Å—Ç—ã–µ (–≤–∞–∂–Ω–æ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏!)
            this.history = serverHistory || [];
            
            console.log('‚úÖ –ò—Å—Ç–æ—Ä–∏—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –º–∞—Å—à—Ç–∞–±–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –∏–∑ —Å–µ—Ä–≤–µ—Ä–∞');
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage –∫–∞–∫ —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
            this.saveToLocalStorage();
        } catch (err) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å —Å–µ—Ä–≤–µ—Ä–∞:', err);
            // –ù–ï –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ localStorage –ø—Ä–∏ –æ—à–∏–±–∫–µ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ
            this.history = [];
        }
    } else if (!user) {
        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ
        console.log('üì± –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ');
        this.history = [];
    } else {
        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –Ω–æ –æ—Ñ–ª–∞–π–Ω - –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ localStorage
        console.log('üì± –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –º–∞—Å—à—Ç–∞–±–æ–≤ –∏–∑ localStorage (–æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º)');
        this.loadFromLocalStorage();
    }
    
    this.renderHistory();
},

    loadFromLocalStorage() {
        const saved = localStorage.getItem('scaleCalculatorHistory');
        if (saved) {
            try {
                this.history = JSON.parse(saved) || [];
                console.log('üì• –ò—Å—Ç–æ—Ä–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ localStorage:', this.history);
            } catch (e) {
                console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏:', e);
                this.history = [];
            }
        } else {
            this.history = [];
        }
    },

    saveToLocalStorage() {
        localStorage.setItem('scaleCalculatorHistory', JSON.stringify(this.history));
        console.log('üíæ –ò—Å—Ç–æ—Ä–∏—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –º–∞—Å—à—Ç–∞–±–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ localStorage');
    },

    async saveHistory() {
        // –í—Å–µ–≥–¥–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
        this.saveToLocalStorage();
        
        // –ü—ã—Ç–∞–µ–º—Å—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å —Å–µ—Ä–≤–µ—Ä–æ–º
        if (this.isOnline) {
            await this.syncToServer();
        } else {
            this.pendingSync = true;
            console.log('‚è≥ –û—Ç–ª–æ–∂–µ–Ω–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º (–æ—Ñ–ª–∞–π–Ω)');
        }
    },

    async syncToServer() {
        const user = await API.getProfile();
        if (!user) {
            console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é');
            return;
        }

        try {
            console.log('üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –º–∞—Å—à—Ç–∞–±–æ–≤ —Å —Å–µ—Ä–≤–µ—Ä–æ–º...');
            console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ:', this.history);
            
            await API.scaleCalculator.saveHistory(this.history);
            
            this.pendingSync = false;
            console.log('‚úÖ –ò—Å—Ç–æ—Ä–∏—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –º–∞—Å—à—Ç–∞–±–æ–≤ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —Å —Å–µ—Ä–≤–µ—Ä–æ–º');
            this.showToast('–ò—Å—Ç–æ—Ä–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
        } catch (err) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å —Å–µ—Ä–≤–µ—Ä–æ–º:', err);
            this.pendingSync = true;
            this.showToast('–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏');
        }
    },
    
    setupEventListeners() {
        const scaleInput = document.getElementById('scaleInput');
        const textHeightInput = document.getElementById('textHeightInput');
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤–≤–æ–¥–∞ —Å debounce
        scaleInput.addEventListener('input', (e) => {
            this.handleScaleInput(e.target.value);
        });
        
        textHeightInput.addEventListener('input', (e) => {
            this.handleTextHeightInput(e.target.value);
        });
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ñ–æ–∫—É—Å–∞ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–π
        scaleInput.addEventListener('focus', (e) => {
            this.animateInputFocus(e.target);
        });
        
        scaleInput.addEventListener('blur', (e) => {
            this.animateInputBlur(e.target);
        });
        
        textHeightInput.addEventListener('focus', (e) => {
            this.animateInputFocus(e.target);
        });
        
        textHeightInput.addEventListener('blur', (e) => {
            this.animateInputBlur(e.target);
        });
        
        // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –≤–≤–æ–¥–∞ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        scaleInput.addEventListener('keydown', (e) => {
            if (e.key === '-' || e.key === 'e') {
                e.preventDefault();
            }
        });
        
        textHeightInput.addEventListener('keydown', (e) => {
            if (e.key === '-' || e.key === 'e') {
                e.preventDefault();
            }
        });
    },
    
    handleScaleInput(value) {
        clearTimeout(this.debounceTimer);
        
        // –û—á–∏—Å—Ç–∫–∞ –≤—Ç–æ—Ä–æ–≥–æ –ø–æ–ª—è –ø—Ä–∏ –≤–≤–æ–¥–µ
        const textHeightInput = document.getElementById('textHeightInput');
        if (value) {
            textHeightInput.value = '';
            textHeightInput.parentElement.classList.remove('has-value');
        }
        
        // –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ —Ä–∞—Å—á—ë—Ç–æ–º
        this.debounceTimer = setTimeout(() => {
            if (value && !isNaN(value) && value > 0) {
                const scale = parseFloat(value);
                const textHeight = this.calculateTextHeightFromScale(scale);
                this.displayResult('scale', scale, textHeight);
                this.animateResult();
            } else if (!value) {
                this.clearResult();
            }
        }, 300);
    },
    
    handleTextHeightInput(value) {
        clearTimeout(this.debounceTimer);
        
        // –û—á–∏—Å—Ç–∫–∞ –≤—Ç–æ—Ä–æ–≥–æ –ø–æ–ª—è –ø—Ä–∏ –≤–≤–æ–¥–µ
        const scaleInput = document.getElementById('scaleInput');
        if (value) {
            scaleInput.value = '';
            scaleInput.parentElement.classList.remove('has-value');
        }
        
        // –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ —Ä–∞—Å—á—ë—Ç–æ–º
        this.debounceTimer = setTimeout(() => {
            if (value && !isNaN(value) && value > 0) {
                const textHeight = parseFloat(value);
                const scale = this.calculateScaleFromTextHeight(textHeight);
                this.displayResult('height', scale, textHeight);
                this.animateResult();
            } else if (!value) {
                this.clearResult();
            }
        }, 300);
    },
    
    // –†–∞—Å—á—ë—Ç –≤—ã—Å–æ—Ç—ã —Ç–µ–∫—Å—Ç–∞ –ø–æ –º–∞—Å—à—Ç–∞–±—É (–ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∞—è –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è)
    calculateTextHeightFromScale(scale) {
        const { scale1, height1, scale2, height2 } = this.knownValues;
        
        // –õ–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∞—è –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        const logScale = Math.log(scale);
        const logScale1 = Math.log(scale1);
        const logScale2 = Math.log(scale2);
        const logHeight1 = Math.log(height1);
        const logHeight2 = Math.log(height2);
        
        // –ò–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è –≤ –ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–æ–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ
        const t = (logScale - logScale1) / (logScale2 - logScale1);
        const logHeight = logHeight1 + t * (logHeight2 - logHeight1);
        
        // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω–æ –∏–∑ –ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞
        const height = Math.exp(logHeight);
        
        // –û–∫—Ä—É–≥–ª–µ–Ω–∏–µ –¥–æ 3 –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
        return Math.round(height * 1000) / 1000;
    },
    
    // –†–∞—Å—á—ë—Ç –º–∞—Å—à—Ç–∞–±–∞ –ø–æ –≤—ã—Å–æ—Ç–µ —Ç–µ–∫—Å—Ç–∞
    calculateScaleFromTextHeight(textHeight) {
        const { scale1, height1, scale2, height2 } = this.knownValues;
        
        // –õ–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∞—è –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è
        const logHeight = Math.log(textHeight);
        const logHeight1 = Math.log(height1);
        const logHeight2 = Math.log(height2);
        const logScale1 = Math.log(scale1);
        const logScale2 = Math.log(scale2);
        
        // –ò–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è –≤ –ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–æ–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ
        const t = (logHeight - logHeight1) / (logHeight2 - logHeight1);
        const logScale = logScale1 + t * (logScale2 - logScale1);
        
        // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω–æ –∏–∑ –ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞
        const scale = Math.exp(logScale);
        
        // –û–∫—Ä—É–≥–ª–µ–Ω–∏–µ –¥–æ —Ü–µ–ª–æ–≥–æ —á–∏—Å–ª–∞
        return Math.round(scale);
    },
    
    displayResult(inputType, scale, textHeight) {
        const resultContent = document.getElementById('resultContent');
        const resultSection = document.getElementById('resultSection');
        
        let html = '';
        
        if (inputType === 'scale') {
            html = `
                <div class="result-item primary">
                    <span class="result-label">–î–ª—è –º–∞—Å—à—Ç–∞–±–∞ 1:${scale}</span>
                    <span class="result-value">${textHeight} –º–º</span>
                </div>
                <div class="result-explanation">
                    –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è –≤—ã—Å–æ—Ç–∞ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –∫–∞—Ä—Ç–µ –¥–∞–Ω–Ω–æ–≥–æ –º–∞—Å—à—Ç–∞–±–∞ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç ${textHeight} –º–∏–ª–ª–∏–º–µ—Ç—Ä–æ–≤
                </div>
            `;
        } else {
            html = `
                <div class="result-item primary">
                    <span class="result-label">–î–ª—è –≤—ã—Å–æ—Ç—ã —Ç–µ–∫—Å—Ç–∞ ${textHeight} –º–º</span>
                    <span class="result-value">1:${scale}</span>
                </div>
                <div class="result-explanation">
                    –¢–µ–∫—Å—Ç –≤—ã—Å–æ—Ç–æ–π ${textHeight} –º–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –º–∞—Å—à—Ç–∞–±—É –∫–∞—Ä—Ç—ã 1:${scale}
                </div>
            `;
        }
        
        resultContent.innerHTML = html;
        resultSection.classList.add('active');
        
        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
        this.addToHistory(scale, textHeight);
    },
    
    clearResult() {
        const resultSection = document.getElementById('resultSection');
        const resultContent = document.getElementById('resultContent');
        
        resultSection.classList.remove('active');
        setTimeout(() => {
            resultContent.innerHTML = '<p>–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –º–∞—Å—à—Ç–∞–±–∞ –∏–ª–∏ –≤—ã—Å–æ—Ç—ã —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞</p>';
        }, 300);
    },
    
    clearInputs() {
        const scaleInput = document.getElementById('scaleInput');
        const textHeightInput = document.getElementById('textHeightInput');
        
        scaleInput.value = '';
        textHeightInput.value = '';
        
        // –£–¥–∞–ª–µ–Ω–∏–µ –∫–ª–∞—Å—Å–æ–≤ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        scaleInput.parentElement.classList.remove('has-value');
        textHeightInput.parentElement.classList.remove('has-value');
        
        this.clearResult();
        this.showToast('–ü–æ–ª—è –æ—á–∏—â–µ–Ω—ã');
    },
    
    // –†–∞–±–æ—Ç–∞ —Å –∏—Å—Ç–æ—Ä–∏–µ–π
    async addToHistory(scale, textHeight) {
        const timestamp = new Date().toISOString();
        const entry = {
            id: Date.now(),
            scale,
            textHeight,
            timestamp
        };
        
        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –Ω–∞—á–∞–ª–æ –º–∞—Å—Å–∏–≤–∞
        this.history.unshift(entry);
        
        // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏ (–º–∞–∫—Å–∏–º—É–º 20 –∑–∞–ø–∏—Å–µ–π)
        if (this.history.length > 20) {
            this.history = this.history.slice(0, 20);
        }
        
        await this.saveHistory();
        this.renderHistory();
    },
    
    async clearHistory() {
        if (confirm('–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é —Ä–∞—Å—á—ë—Ç–æ–≤?')) {
            this.history = [];
            await this.saveHistory();
            this.renderHistory();
            this.showToast('–ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞');
        }
    },
    
    renderHistory() {
        const historyList = document.getElementById('historyList');
        const historySection = document.getElementById('historySection');
        
        if (this.history.length === 0) {
            historyList.innerHTML = '<p class="history-empty">–ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫–∞ –ø—É—Å—Ç–∞</p>';
            historySection.classList.remove('has-history');
            return;
        }
        
        historySection.classList.add('has-history');
        
        const syncStatus = this.pendingSync && !this.isOnline ? ' <span class="sync-pending">‚è≥</span>' : '';
        
        const html = this.history.map(entry => {
            const date = new Date(entry.timestamp);
            const timeStr = date.toLocaleTimeString('ru-RU', { 
                hour: '2-digit', 
                minute: '2-digit' 
            });
            const dateStr = date.toLocaleDateString('ru-RU', { 
                day: 'numeric', 
                month: 'short' 
            });
            
            return `
                <div class="history-item" onclick="scaleCalculator.restoreFromHistory(${entry.scale}, ${entry.textHeight})">
                    <div class="history-values">
                        <span class="history-scale">1:${entry.scale}</span>
                        <span class="history-arrow">‚Üî</span>
                        <span class="history-height">${entry.textHeight} –º–º</span>
                    </div>
                    <div class="history-time">${timeStr}, ${dateStr}</div>
                </div>
            `;
        }).join('');
        
        historyList.innerHTML = html + (this.history.length > 0 && syncStatus ? `<div class="sync-status">${syncStatus}</div>` : '');
    },
    
    restoreFromHistory(scale, textHeight) {
        const scaleInput = document.getElementById('scaleInput');
        const textHeightInput = document.getElementById('textHeightInput');
        
        // –ê–Ω–∏–º–∞—Ü–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
        scaleInput.value = scale;
        textHeightInput.value = '';
        
        scaleInput.parentElement.classList.add('has-value');
        textHeightInput.parentElement.classList.remove('has-value');
        
        this.displayResult('scale', scale, textHeight);
        this.animateResult();
        this.showToast('–ó–Ω–∞—á–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏');
        
        // –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—É
        document.querySelector('.calculator-card').scrollIntoView({ 
            behavior: 'smooth', 
            block: 'center' 
        });
    },
    
    // –ê–Ω–∏–º–∞—Ü–∏–∏
    animateInputFocus(input) {
        const wrapper = input.parentElement;
        wrapper.classList.add('focused');
        
        const underline = wrapper.querySelector('.input-underline');
        underline.style.transform = 'scaleX(1)';
    },
    
    animateInputBlur(input) {
        const wrapper = input.parentElement;
        wrapper.classList.remove('focused');
        
        if (input.value) {
            wrapper.classList.add('has-value');
        } else {
            wrapper.classList.remove('has-value');
            const underline = wrapper.querySelector('.input-underline');
            underline.style.transform = 'scaleX(0)';
        }
    },
    
    animateResult() {
        const resultCard = document.querySelector('.result-card');
        resultCard.classList.add('animate-in');
        
        setTimeout(() => {
            resultCard.classList.remove('animate-in');
        }, 600);
    },
    
    addInitialAnimation() {
        // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
        const elements = [
            '.info-card',
            '.calculator-card',
            '.history-section',
            '.help-section'
        ];
        
        elements.forEach((selector, index) => {
            const element = document.querySelector(selector);
            if (element) {
                element.style.opacity = '0';
                element.style.transform = 'translateY(20px)';
                
                setTimeout(() => {
                    element.style.transition = 'all 0.6s cubic-bezier(0.4, 0, 0.2, 1)';
                    element.style.opacity = '1';
                    element.style.transform = 'translateY(0)';
                }, 100 + (index * 100));
            }
        });
    },
    
    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    showToast(message) {
        const toast = document.getElementById('toast');
        
        let displayMessage = message;
        if (this.pendingSync && !this.isOnline) {
            displayMessage += ' (–æ–∂–∏–¥–∞–µ—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏)';
        }
        
        toast.textContent = displayMessage;
        toast.classList.add('show');
        
        setTimeout(() => {
            toast.classList.remove('show');
        }, 3000);
    },

    // –≠–∫—Å–ø–æ—Ä—Ç –∏—Å—Ç–æ—Ä–∏–∏
    exportHistory() {
        if (this.history.length === 0) {
            this.showToast('–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞');
            return;
        }
        
        const data = {
            history: this.history,
            exportDate: new Date().toISOString(),
            version: '1.0'
        };
        
        const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' });
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = `scale-calculator-history-${new Date().toISOString().split('T')[0]}.json`;
        a.click();
        URL.revokeObjectURL(url);
        
        this.showToast('–ò—Å—Ç–æ—Ä–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞');
    },

    // –ò–º–ø–æ—Ä—Ç –∏—Å—Ç–æ—Ä–∏–∏
    async importHistory(file) {
        const reader = new FileReader();
        reader.onload = async (e) => {
            try {
                const data = JSON.parse(e.target.result);
                
                if (data.history && Array.isArray(data.history)) {
                    // –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∏—Å—Ç–æ—Ä–∏–µ–π, –∏–∑–±–µ–≥–∞—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
                    const existingIds = new Set(this.history.map(entry => entry.id));
                    const newEntries = data.history.filter(entry => !existingIds.has(entry.id));
                    
                    this.history = [...newEntries, ...this.history];
                    
                    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä
                    if (this.history.length > 50) {
                        this.history = this.history.slice(0, 50);
                    }
                    
                    await this.saveHistory();
                    this.renderHistory();
                    this.showToast(`–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${newEntries.length} –∑–∞–ø–∏—Å–µ–π`);
                } else {
                    this.showToast('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞');
                }
            } catch (error) {
                this.showToast('–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞');
                console.error('Import error:', error);
            }
        };
        reader.readAsText(file);
    }
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ DOM
document.addEventListener('DOMContentLoaded', () => {
    scaleCalculator.init();
});

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è service worker –¥–ª—è PWA
if ('serviceWorker' in navigator && (location.protocol === 'https:' || location.hostname === 'localhost')) {
    navigator.serviceWorker.register('/sw.js').catch((error) => {
        console.log('Service Worker registration failed:', error);
    });
